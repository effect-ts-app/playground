diff --git a/transformer.js b/transformer.js
index d119a28427139fb3494eeeed8e23efb8a3a17925..7c6e4c5b4e4d02fbf283fbd92456b45e53d8e146 100644
--- a/transformer.js
+++ b/transformer.js
@@ -6,6 +6,7 @@ Object.defineProperty(exports, "__esModule", {
 exports.default = effectPlugin;
 var _pluginutils = /*#__PURE__*/require("@rollup/pluginutils");
 var _typescript = /*#__PURE__*/_interopRequireDefault( /*#__PURE__*/require("typescript"));
+var path = require("path")
 function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
 class RefCounted {
   constructor(ref) {
@@ -88,12 +101,17 @@ function effectPlugin(program, options) {
           }
           return node;
         };
+        const tryFindSourceFileName = node => {
+          try {
+            return findSource(declaration).fileName
+          } catch { return "" }
+        };
         const optimizeVisitor = node => {
           const visited = _typescript.default.visitEachChild(node, optimizeVisitor, ctx);
           if (_typescript.default.isCallExpression(visited) && visited.arguments.length > 0) {
             const signature = checker.getResolvedSignature(visited);
             const declaration = signature?.declaration;
-            if (declaration && !_typescript.default.isJSDocSignature(declaration) && findSource(declaration).fileName.includes("@fp-ts/data/Function")) {
+            if (declaration && !_typescript.default.isJSDocSignature(declaration) && tryFindSourceFileName(declaration).includes("@fp-ts/data/Function")) {
               if (declaration.name?.getText() === "pipe") {
                 let expr = _typescript.default.visitNode(visited.arguments[0], optimizeVisitor);
                 for (let i = 1; i < visited.arguments.length; i++) {
@@ -141,7 +159,7 @@ function effectPlugin(program, options) {
           statements.push(ctx.factory.createImportDeclaration(undefined, ctx.factory.createImportClause(false, undefined, ctx.factory.createNamespaceImport(tracer.get)), ctx.factory.createStringLiteral("@effect/io/Debug")));
         }
         if (fileName.count > 0) {
-          statements.push(ctx.factory.createVariableStatement(undefined, ctx.factory.createVariableDeclarationList([ctx.factory.createVariableDeclaration(fileName.get, undefined, undefined, ctx.factory.createStringLiteral(sourceFile.fileName))], _typescript.default.NodeFlags.Const)));
+          statements.push(ctx.factory.createVariableStatement(undefined, ctx.factory.createVariableDeclarationList([ctx.factory.createVariableDeclaration(fileName.get, undefined, undefined, ctx.factory.createStringLiteral(path.relative(process.cwd(), sourceFile.fileName)))], _typescript.default.NodeFlags.Const)));
         }
         for (const statement of visited.statements) {
           statements.push(statement);